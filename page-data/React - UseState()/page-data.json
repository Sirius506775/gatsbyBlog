{"componentChunkName":"component---src-templates-blog-post-js","path":"/React - UseState()/","result":{"data":{"site":{"siteMetadata":{"title":"DongHeon's Develog"}},"markdownRemark":{"id":"eacc986f-0691-5da2-a621-06ff1df7045d","excerpt":"useState Hook 리액트의 컴포넌트가 re-rendering 하는 조건 중 하나는 컴포넌트 안에 있는 state가 변경되었을 경우입니다. useState는 리액트가 컴포넌트들을 모니터링하기 위해 만들어진 개념입니다. state…","html":"<h4>useState Hook</h4>\n<p>리액트의 컴포넌트가 re-rendering 하는 조건 중 하나는 컴포넌트 안에 있는 state가 변경되었을 경우입니다.</p>\n<ul>\n<li>\n<p>useState는 리액트가 컴포넌트들을 모니터링하기 위해 만들어진 개념입니다.</p>\n<ul>\n<li>state로 데이터를 만들면 리액트가 모니터링을 할 수 있습니다.</li>\n<li>리액트는 컴포넌트의 상태가 변경되었음을 알아야하기 때문에 리액트에서는 useState를 사용하여 상태를 관리합니다.</li>\n</ul>\n</li>\n<li>\n<p>useState는 배열을 반환 하는 호출가능한 함수이다.</p>\n<ul>\n<li>함수 실행 시 컴포넌트에 있는 값을 쓰는 것이 아니라 useState를 통해 가져온 배열을 사용하는 것</li>\n<li>배열의 첫번째 요소는 초기화된 값이며, 두 번째 값은 초기값을 변경할 수 있는 함수로 구성되어 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>useState 훅은 실제로 react 패키지에 들어있기 때문에 임포트를 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></code></pre></div>\n<p>useState()에 전달하는 값은 상태 변수의 디폴트 값이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">,</span> setTitle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>setstate를 검사 하는 작동원리</h5>\n<ul>\n<li>setState가 실행이 되면 React는 자기가 원래 가지고 있던 객체랑 setState로 들어온 객체랑 같은 건지 비교를 하는 작업을 거칩니다. ( 때문에 useState를 남발하는 것은 지양)</li>\n<li>만약 이 2개가 같다면 re-render를 하지 않아도 된다고 판단하고 skip합니다.</li>\n</ul>\n<blockquote>\n<p>** change와 change() **</p>\n<ul>\n<li>change = 변수의 의미</li>\n<li>change() = 실행한 결과의 의미</li>\n</ul>\n</blockquote>\n<p>state를 다루는 진짜 이유는 Re-rendering을 하기 위해서입니다. 다시 컴포넌트를 뿌려주기 위함이 목적입니다.</p>\n<h5>re-render를 하는 3가지 상황</h5>\n<ul>\n<li>컴포넌트의 state가 변경이 되었을 때</li>\n<li>props가 변경이 되었을 때</li>\n<li>상위컴포넌트가 변경이 되어서 re-render가 되면, 하위 컴포넌트도 re-render를 한다.</li>\n</ul>","frontmatter":{"title":"React - UseState()","date":"December 19, 2022","description":"리액트의 컴포넌트가 re-rendering 하는 조건 중 하나는 컴포넌트 안에 있는 state가 변경되었을 경우입니다."}},"previous":{"fields":{"slug":"/React - input 태그 사용법/"},"frontmatter":{"title":"React - input 태그 사용법"}},"next":null},"pageContext":{"id":"eacc986f-0691-5da2-a621-06ff1df7045d","previousPostId":"aadacb5b-b41c-59ff-a2b7-775cf0652928","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}