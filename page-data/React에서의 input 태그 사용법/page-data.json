{"componentChunkName":"component---src-templates-blog-post-js","path":"/React에서의 input 태그 사용법/","result":{"data":{"site":{"siteMetadata":{"title":"DoneHeon's Develog"}},"markdownRemark":{"id":"c45ccd1e-45ea-5f36-98aa-28ba860bf2df","excerpt":"React에서 input태그를 사용하는 방법 input태그는 사용자가 입력을 해도 컴포넌트가 변하지 않습니다. re-rendering이 일어나지 않는다는 말입니다. 1. useRef를 사용하는 방법 (권장하지 않음) id를 사용하지 않고 대신 ref를 사용하는 방법입니다. ref…","html":"<h5>React에서 input태그를 사용하는 방법</h5>\n<ul>\n<li>input태그는 사용자가 입력을 해도 컴포넌트가 변하지 않습니다. re-rendering이 일어나지 않는다는 말입니다.</li>\n</ul>\n<h5>1. useRef를 사용하는 방법 (권장하지 않음)</h5>\n<ul>\n<li>id를 사용하지 않고 대신 ref를 사용하는 방법입니다.</li>\n<li>ref를 만드는 이유는 DOM 요소를 사용해야할 경우에 사용하기 위함입니다. ( 빈도 수는 적음)</li>\n<li>input 태그는 빈 곳에 입력을 하거나, 이미 있던 내용을 보여주기 위함의 2가지 목적이 있다는 것을 기억해보면 이 방법은 추천하지 않습니다.</li>\n</ul>\n<h5>2. state를 사용하는 방법</h5>\n<ul>\n<li>value는 re-rendering이 안되기 때문에 일반적으로 input태그를 쓸때는 ref가 아니라 state로 빼라고 말하곤 합니다.</li>\n<li>사용자가 입력을 하면 그 입력값을 가지고 state를 변경해서 다시 렌더링을 하며 이떄 <code class=\"language-text\">onChange</code> 함수를 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputEx2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span>setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> \n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> \n\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> \n\t\t\t<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>  \n\t\t\t<span class=\"token comment\">//onChange() method를 사용해서 setText으로 state를 변경할 수 있다</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> \n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\t\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> InputEx2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>=> 하지만 실제로 외부에서 작업할 때에는 React의 input를 효과적으로 하기위해 만든 수많은 플러그인을 사용한다는 것을 기억하자...!</p>","frontmatter":{"title":"React에서의 input 태그 사용법","date":"December 21, 2022","description":"input태그는 사용자가 입력을 해도 컴포넌트가 변하지 않습니다. re-rendering이 일어나지 않는다는 말입니다."}},"previous":{"fields":{"slug":"/React 구조 디자인 매뉴얼/"},"frontmatter":{"title":"React 구조 디자인 매뉴얼"}},"next":{"fields":{"slug":"/UseState()/"},"frontmatter":{"title":"UseState()"}}},"pageContext":{"id":"c45ccd1e-45ea-5f36-98aa-28ba860bf2df","previousPostId":"99d99470-6a7d-5f52-a559-5a2b14020704","nextPostId":"b1855992-fde9-5403-8754-92708c7a3699"}},"staticQueryHashes":["3257411868","3589320610"],"slicesMap":{}}