{"componentChunkName":"component---src-templates-blog-post-js","path":"/Pure Function(순수 함수)/","result":{"data":{"site":{"siteMetadata":{"title":"DongHeon's Develog"}},"markdownRemark":{"id":"1307ab99-40c4-5eb9-8354-b6672faf463f","excerpt":"Pure Function(순수함수 <-> Impure Function) 순수함수의 조건 동일한 인자를 넣을 경우 항상 같은 값을 반환해야한다.(외부 상태에 의존 x) 함수가 호출되고 나서 아무런 변화가 없어야한다. (외부 상태 변경 x) 1-…","html":"<p>Pure Function(순수함수 &#x3C;-> Impure Function)</p>\n<p>순수함수의 조건</p>\n<ol>\n<li>동일한 인자를 넣을 경우 항상 같은 값을 반환해야한다.(외부 상태에 의존 x)</li>\n<li>함수가 호출되고 나서 아무런 변화가 없어야한다. (외부 상태 변경 x)</li>\n</ol>\n<ul>\n<li></li>\n</ul>\n<blockquote>\n<p>1-1. 함수의 인자가 아닌 외부 변수를 사용하지 않아야 합니다. (상수는 OK)<br>\n1-2. 함수 내부에서 Math.random()이나 file I/O등 호출때마다 달라지는 값이 없어야 합니다.<br>\n2-1. 외부 변수의 값을 수정하지 않아야 합니다.<br>\n2-2. 인자로 넘어온 Object나 Array, Date와 같은 값들의 필드를 내부에서 변경하지 않아야 합니다.<br>\n2-2. 콘솔, 네트워크, 기타 DOM API등을 사용하지 않아야 합니다.<br>\n2-3. try ~ catch등 같은 에러 처리 로직을 사용하지 않아야 한다.</p>\n</blockquote>\n<blockquote>\n<p><strong>예측 가능</strong>: 동일한 입력에 대해 예측 가능한 output을 생성한다.<br>\n<strong>가독성</strong>: 독립된 실행 단위를 가지므로 누구나 그 목적을 완전히 이해할 수 있다.<br>\n<strong>재사용 가능</strong>: 함수와 호출자의 동작을 변경하지 않고 코드의 여러 위치에서 함수를 재사용할 수 있다.<br>\n테스트 가능**: 독립적인 단위로 테스트 가능하다.</p>\n</blockquote>\n<p>=> Pure function은 항상 같은 value를 return 하기 때문에 테스트하기 용이하다.</p>\n<p>Pure Function always return same values.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My Name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Heon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 'My Name is Heon'</span></code></pre></div>\n<p>``\n<strong>순수함수 + 순수함수 = 순수함수</strong> 가 되므로 순수함수로 조립된 최종값만 부수효과가 있는 함수를 통해 처리하고, 다시 그 결과를 순수함수를 통해 조립을 하는 방식으로 개발을 하면 우리 목적을 달성할 수 있게 된다.\n3</p>\n<blockquote>\n<h2>함수형 프로그래밍의 개념도</h2>\n<p>Input => <strong>(순수 함수 => 순수 함수 => 순수 함수 => 순수 함수)</strong> => 부수 효과 => Output1</p>\n<p>Output1 => Input => <strong>(순수 함수 => 순수 함수)</strong> => 부수 효과 => Output2</p>\n</blockquote>\n<p>그래서 이렇게 순수함수를 통해 데이터가 지나가는 경우에는 외부에 영향을 주지 않기 때문에 무한한 조립의 가지수를 다 테스트하지 않고 각 함수만 잘 동작한다면 저 구간은 문제 없을 거라는 것을 확신할 수 있게 됩니다. 이렇게 <strong>값이 변하지 않는 상태를 유지하는 것을 불변성</strong>(Immutablilty)이라고 합니다.</p>\n<p>#FuntionalProgramming</p>","frontmatter":{"title":"Pure Function","date":"December 07, 2022","description":"This is a custom description for SEO and Open Graph purposes, rather than the default generated excerpt. Simply add a description field to the frontmatter."}},"previous":{"fields":{"slug":"/deploy test/"},"frontmatter":{"title":"deploy test"}},"next":null},"pageContext":{"id":"1307ab99-40c4-5eb9-8354-b6672faf463f","previousPostId":"c5826887-fc3a-5e16-8616-b52d8b8d9a37","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}